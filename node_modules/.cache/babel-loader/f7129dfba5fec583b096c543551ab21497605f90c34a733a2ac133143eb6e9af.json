{"ast":null,"code":"export const initialCryptoData = [{\n  id: 'bitcoin',\n  rank: 1,\n  name: 'Bitcoin',\n  symbol: 'BTC',\n  logo: 'https://cryptologos.cc/logos/bitcoin-btc-logo.png',\n  currentPrice: 50000,\n  priceChange1h: 0.5,\n  priceChange24h: 2.3,\n  priceChange7d: -1.2,\n  marketCap: 928000000000,\n  volume24h: 28000000000,\n  circulatingSupply: 19000000,\n  maxSupply: 21000000,\n  chartData: Array.from({\n    length: 7\n  }, () => Math.random() * 1000)\n}, {\n  id: 'ethereum',\n  rank: 2,\n  name: 'Ethereum',\n  symbol: 'ETH',\n  logo: 'https://cryptologos.cc/logos/ethereum-eth-logo.png',\n  currentPrice: 3000,\n  priceChange1h: -0.2,\n  priceChange24h: 1.5,\n  priceChange7d: 3.8,\n  marketCap: 360000000000,\n  volume24h: 15000000000,\n  circulatingSupply: 120000000,\n  maxSupply: null,\n  chartData: Array.from({\n    length: 7\n  }, () => Math.random() * 1000)\n}, {\n  id: 'tether',\n  rank: 3,\n  name: 'Tether',\n  symbol: 'USDT',\n  logo: 'https://cryptologos.cc/logos/tether-usdt-logo.png',\n  currentPrice: 1,\n  priceChange1h: 0.01,\n  priceChange24h: -0.02,\n  priceChange7d: 0.05,\n  marketCap: 83000000000,\n  volume24h: 50000000000,\n  circulatingSupply: 83000000000,\n  maxSupply: null,\n  chartData: Array.from({\n    length: 7\n  }, () => Math.random() * 1000)\n}, {\n  id: 'binancecoin',\n  rank: 4,\n  name: 'BNB',\n  symbol: 'BNB',\n  logo: 'https://cryptologos.cc/logos/bnb-bnb-logo.png',\n  currentPrice: 300,\n  priceChange1h: 1.2,\n  priceChange24h: -0.8,\n  priceChange7d: 2.5,\n  marketCap: 50000000000,\n  volume24h: 2000000000,\n  circulatingSupply: 166801148,\n  maxSupply: 200000000,\n  chartData: Array.from({\n    length: 7\n  }, () => Math.random() * 1000)\n}, {\n  id: 'solana',\n  rank: 5,\n  name: 'Solana',\n  symbol: 'SOL',\n  logo: 'https://cryptologos.cc/logos/solana-sol-logo.png',\n  currentPrice: 100,\n  priceChange1h: -1.5,\n  priceChange24h: 5.2,\n  priceChange7d: 10.5,\n  marketCap: 40000000000,\n  volume24h: 3000000000,\n  circulatingSupply: 400000000,\n  maxSupply: null,\n  chartData: Array.from({\n    length: 7\n  }, () => Math.random() * 1000)\n}];\nexport class WebSocketSimulator {\n  constructor() {\n    this.intervalId = null;\n    this.subscribers = [];\n  }\n  subscribe(callback) {\n    this.subscribers.push(callback);\n    if (!this.intervalId) {\n      this.start();\n    }\n    return () => {\n      this.subscribers = this.subscribers.filter(cb => cb !== callback);\n      if (this.subscribers.length === 0) {\n        this.stop();\n      }\n    };\n  }\n  start() {\n    this.intervalId = setInterval(() => {\n      const updatedData = this.generateUpdate();\n      this.subscribers.forEach(callback => callback(updatedData));\n    }, 1500);\n  }\n  stop() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n  generateUpdate() {\n    return initialCryptoData.map(asset => ({\n      ...asset,\n      currentPrice: this.updatePrice(asset.currentPrice),\n      priceChange1h: this.updatePercentage(asset.priceChange1h),\n      priceChange24h: this.updatePercentage(asset.priceChange24h),\n      priceChange7d: this.updatePercentage(asset.priceChange7d),\n      volume24h: this.updateVolume(asset.volume24h)\n    }));\n  }\n  updatePrice(currentPrice) {\n    const changePercent = (Math.random() - 0.5) * 0.02; // ±1% max change\n    return +(currentPrice * (1 + changePercent)).toFixed(2);\n  }\n  updatePercentage(current) {\n    const change = (Math.random() - 0.5) * 0.4; // ±0.2% max change\n    return +(current + change).toFixed(2);\n  }\n  updateVolume(current) {\n    const changePercent = (Math.random() - 0.5) * 0.04; // ±2% max change\n    return Math.round(current * (1 + changePercent));\n  }\n}","map":{"version":3,"names":["initialCryptoData","id","rank","name","symbol","logo","currentPrice","priceChange1h","priceChange24h","priceChange7d","marketCap","volume24h","circulatingSupply","maxSupply","chartData","Array","from","length","Math","random","WebSocketSimulator","constructor","intervalId","subscribers","subscribe","callback","push","start","filter","cb","stop","setInterval","updatedData","generateUpdate","forEach","clearInterval","map","asset","updatePrice","updatePercentage","updateVolume","changePercent","toFixed","current","change","round"],"sources":["/Users/barshanbanerjee/Desktop/Test/src/services/mockData.ts"],"sourcesContent":["import { CryptoAsset } from '../types/crypto';\n\nexport const initialCryptoData: CryptoAsset[] = [\n  {\n    id: 'bitcoin',\n    rank: 1,\n    name: 'Bitcoin',\n    symbol: 'BTC',\n    logo: 'https://cryptologos.cc/logos/bitcoin-btc-logo.png',\n    currentPrice: 50000,\n    priceChange1h: 0.5,\n    priceChange24h: 2.3,\n    priceChange7d: -1.2,\n    marketCap: 928000000000,\n    volume24h: 28000000000,\n    circulatingSupply: 19000000,\n    maxSupply: 21000000,\n    chartData: Array.from({ length: 7 }, () => Math.random() * 1000),\n  },\n  {\n    id: 'ethereum',\n    rank: 2,\n    name: 'Ethereum',\n    symbol: 'ETH',\n    logo: 'https://cryptologos.cc/logos/ethereum-eth-logo.png',\n    currentPrice: 3000,\n    priceChange1h: -0.2,\n    priceChange24h: 1.5,\n    priceChange7d: 3.8,\n    marketCap: 360000000000,\n    volume24h: 15000000000,\n    circulatingSupply: 120000000,\n    maxSupply: null,\n    chartData: Array.from({ length: 7 }, () => Math.random() * 1000),\n  },\n  {\n    id: 'tether',\n    rank: 3,\n    name: 'Tether',\n    symbol: 'USDT',\n    logo: 'https://cryptologos.cc/logos/tether-usdt-logo.png',\n    currentPrice: 1,\n    priceChange1h: 0.01,\n    priceChange24h: -0.02,\n    priceChange7d: 0.05,\n    marketCap: 83000000000,\n    volume24h: 50000000000,\n    circulatingSupply: 83000000000,\n    maxSupply: null,\n    chartData: Array.from({ length: 7 }, () => Math.random() * 1000),\n  },\n  {\n    id: 'binancecoin',\n    rank: 4,\n    name: 'BNB',\n    symbol: 'BNB',\n    logo: 'https://cryptologos.cc/logos/bnb-bnb-logo.png',\n    currentPrice: 300,\n    priceChange1h: 1.2,\n    priceChange24h: -0.8,\n    priceChange7d: 2.5,\n    marketCap: 50000000000,\n    volume24h: 2000000000,\n    circulatingSupply: 166801148,\n    maxSupply: 200000000,\n    chartData: Array.from({ length: 7 }, () => Math.random() * 1000),\n  },\n  {\n    id: 'solana',\n    rank: 5,\n    name: 'Solana',\n    symbol: 'SOL',\n    logo: 'https://cryptologos.cc/logos/solana-sol-logo.png',\n    currentPrice: 100,\n    priceChange1h: -1.5,\n    priceChange24h: 5.2,\n    priceChange7d: 10.5,\n    marketCap: 40000000000,\n    volume24h: 3000000000,\n    circulatingSupply: 400000000,\n    maxSupply: null,\n    chartData: Array.from({ length: 7 }, () => Math.random() * 1000),\n  },\n];\n\nexport class WebSocketSimulator {\n  private intervalId: NodeJS.Timeout | null = null;\n  private subscribers: ((data: CryptoAsset[]) => void)[] = [];\n\n  subscribe(callback: (data: CryptoAsset[]) => void) {\n    this.subscribers.push(callback);\n    if (!this.intervalId) {\n      this.start();\n    }\n    return () => {\n      this.subscribers = this.subscribers.filter(cb => cb !== callback);\n      if (this.subscribers.length === 0) {\n        this.stop();\n      }\n    };\n  }\n\n  private start() {\n    this.intervalId = setInterval(() => {\n      const updatedData = this.generateUpdate();\n      this.subscribers.forEach(callback => callback(updatedData));\n    }, 1500);\n  }\n\n  private stop() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n\n  private generateUpdate(): CryptoAsset[] {\n    return initialCryptoData.map(asset => ({\n      ...asset,\n      currentPrice: this.updatePrice(asset.currentPrice),\n      priceChange1h: this.updatePercentage(asset.priceChange1h),\n      priceChange24h: this.updatePercentage(asset.priceChange24h),\n      priceChange7d: this.updatePercentage(asset.priceChange7d),\n      volume24h: this.updateVolume(asset.volume24h),\n    }));\n  }\n\n  private updatePrice(currentPrice: number): number {\n    const changePercent = (Math.random() - 0.5) * 0.02; // ±1% max change\n    return +(currentPrice * (1 + changePercent)).toFixed(2);\n  }\n\n  private updatePercentage(current: number): number {\n    const change = (Math.random() - 0.5) * 0.4; // ±0.2% max change\n    return +(current + change).toFixed(2);\n  }\n\n  private updateVolume(current: number): number {\n    const changePercent = (Math.random() - 0.5) * 0.04; // ±2% max change\n    return Math.round(current * (1 + changePercent));\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}